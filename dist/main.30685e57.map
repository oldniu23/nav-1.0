{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","console","log","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAYC,EAAE,WAAF,CAAlB;AACA,IAAMC,UAAUF,UAAUG,IAAV,CAAe,SAAf,CAAhB;AACA,IAAMC,IAAIC,aAAaC,OAAb,CAAqB,GAArB,CAAV;AACA;AACA,IAAMC,UAAUC,KAAKC,KAAL,CAAWL,CAAX,CAAhB;AACA;AACA;AACA,IAAMM,UAAUH,WAAW;AACvB;AACA,EAAEI,MAAK,GAAP,EAAWC,KAAI,sBAAf,EAFuB,EAGvB,EAAED,MAAK,GAAP,EAAWC,KAAI,0BAAf,EAHuB,CAA3B;;AAMA,IAAMC,cAAc,SAAdA,WAAc,CAACD,GAAD,EAAO;AACvB;AACA,WAAOA,IAAIE,OAAJ,CAAY,UAAZ,EAAuB,EAAvB,EACNA,OADM,CACE,SADF,EACY,EADZ,EAENA,OAFM,CAEE,MAFF,EAES,EAFT,EAGNA,OAHM,CAGE,MAHF,EAGS,EAHT,CAAP;AAIA;AACH,CAPD;;AASA,IAAMC,SAAS,SAATA,MAAS,GAAI;AACff,cAAUG,IAAV,CAAe,eAAf,EAAgCa,MAAhC;AACJ;AACIN,YAAQO,OAAR,CAAgB,UAACC,IAAD,EAAMC,KAAN,EAAc;AAC1B,YAAMC,MAAMnB,yEAEYiB,KAAKP,IAFjB,8CAGYE,YAAYK,KAAKN,GAAjB,CAHZ,gPAYTS,YAZS,CAYInB,OAZJ,CAAZ;AAaJkB,YAAIE,EAAJ,CAAO,OAAP,EAAe,YAAI;AACfC,mBAAOC,IAAP,CAAYN,KAAKN,GAAjB;AACA;AACH,SAHD;AAIAQ,YAAIE,EAAJ,CAAO,OAAP,EAAe,QAAf,EAAwB,UAACG,CAAD,EAAK;AACzBA,cAAEC,eAAF;AACA;AACAhB,oBAAQiB,MAAR,CAAeR,KAAf,EAAqB,CAArB;AACA;AACAJ;AACA;AACH,SAPD;AAQC,KA1BD;AA2BH,CA9BD;AA+BAA;AACA;AACAd,EAAE,YAAF,EACCqB,EADD,CACI,OADJ,EACY,YAAI;AACb,QAAIV,MAAOW,OAAOK,MAAP,CAAc,eAAd,CAAX;AACH;AACI,QAAGhB,IAAIiB,OAAJ,CAAY,MAAZ,MAAuB,CAA1B,EAA6B;AACzBjB,cAAM,aAAaA,GAAnB;AACA;AACH;AACDkB,YAAQC,GAAR,CAAYnB,GAAZ;AACAF,YAAQsB,IAAR,CAAa;AACTrB,cAAKE,YAAYD,GAAZ,EAAiB,CAAjB,EAAoBqB,WAApB,EADI;AAET;AACArB,aAAIA;;AAHK,KAAb;AAMAG;AACA;AACH,CAjBD;AAkBAQ,OAAOW,cAAP,GAAwB,YAAI;AACxB;AACA,QAAMC,SAAS3B,KAAK4B,SAAL,CAAe1B,OAAf,CAAf;AACA;AACAL,iBAAagC,OAAb,CAAqB,GAArB,EAAyBF,MAAzB;AACA;AACH,CAND;;AAQAlC,EAAEqC,QAAF,EAAYhB,EAAZ,CAAe,UAAf,EAA0B,UAACG,CAAD,EAAK;AAC3B;AAD2B,QAEpBc,GAFoB,GAEbd,CAFa,CAEpBc,GAFoB;AAG3B;;AACA,SAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAG9B,QAAQ+B,MAAzB,EAAgCD,GAAhC,EAAoC;AAChC,YAAG9B,QAAQ8B,CAAR,EAAW7B,IAAX,CAAgB+B,WAAhB,OAAkCH,GAArC,EACAhB,OAAOC,IAAP,CAAYd,QAAQ8B,CAAR,EAAW5B,GAAvB;AACA;AACA;AACH;AACJ,CAVD","file":"main.30685e57.map","sourceRoot":"..\\src","sourcesContent":["const $siteList = $('.siteList')\r\nconst $lastLi = $siteList.find('li.last')\r\nconst x = localStorage.getItem('x')\r\n// console.log(x)  第一次是个null\r\nconst xObject = JSON.parse(x)\r\n// 把字符串变成对象   第一次也是个null\r\n//下边这个代码  因为第一次(用户没用过的时候)的xObject是空的  需要一个初始值 所以用了 ||\r\nconst hashMap = xObject || [      \r\n    // 如果xObject存在就用xObject 不存在就用默认数组\r\n    { logo:'A',url:'https://www.acfun.cn' },\r\n    { logo:'B',url:'https://www.bilibili.com' },\r\n]\r\n\r\nconst simplifyUrl = (url)=>{  \r\n    //简化url  去除https:// http://和www.\r\n    return url.replace('https://','')\r\n    .replace('http://','')\r\n    .replace('www.','')\r\n    .replace(/\\/.*/,'')\r\n    //正则表达式  删除/开头的内容   \\是用来转义的\r\n}\r\n\r\nconst render = ()=>{\r\n    $siteList.find('li:not(.last)').remove()\r\n// 找到li  删除除了class为last的li标签   x渲染hash的时候先把之前的li删掉 然后在渲染新的\r\n    hashMap.forEach((node,index)=>{\r\n        const $li = $(`<li>\r\n          <div class=\"site\">\r\n            <div class=\"logo\">${node.logo}</div>\r\n            <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n            <div class=\"close\">\r\n                <svg class=\"icon\" >\r\n                    <use xlink:href=\"#icon-close\"></use>\r\n                </svg>\r\n            </div>\r\n          </div>\r\n        </a>\r\n      </li>\r\n        `).insertBefore($lastLi)\r\n    $li.on('click',()=>{\r\n        window.open(node.url)\r\n        // 用open代替a标签打开新窗口\r\n    })\r\n    $li.on('click','.close',(e)=>{\r\n        e.stopPropagation()  \r\n        // 阻止冒泡 避免点击x的时候跳转新页面\r\n        hashMap.splice(index,1)\r\n        // 从hashmap里删一个索引为index的  1是删除个数\r\n        render()\r\n        // 删完后重新渲染一下\r\n    })\r\n    })\r\n}\r\nrender()\r\n// 先render\r\n$('.addButton')\r\n.on('click',()=>{\r\n   let url =  window.prompt('请问您要添加的网址是什么？') \r\n//    这里的url是用户输入的内容\r\n    if(url.indexOf('http') !==0 ){\r\n        url = 'https://' + url\r\n        // 如果用户输入的url开头不是http 就帮它加上\r\n    }\r\n    console.log(url)\r\n    hashMap.push({\r\n        logo:simplifyUrl(url)[0].toUpperCase(), \r\n        //简化url 取简化的url第一个字母转成大写当logo\r\n        url:url\r\n        \r\n    })\r\n    render()\r\n    // 点了之后push进去再render\r\n})\r\nwindow.onbeforeunload = ()=>{\r\n    //在这个函数里把hashMap存下来\r\n    const string = JSON.stringify(hashMap)\r\n    // // localStorage只能存字符串  所以用json.stringify把对象()转成字符串\r\n    localStorage.setItem('x',string)\r\n    // 接受两个值 一个key一个value  在本地的存储里设置一个x 它的值就是string\r\n}\r\n\r\n$(document).on('keypress',(e)=>{  \r\n    // 监听键盘事件\r\n    const {key} = e\r\n    //上边是 const key = e.key的简写\r\n    for(let i = 0;i <hashMap.length;i++){\r\n        if(hashMap[i].logo.toLowerCase() === key)\r\n        window.open(hashMap[i].url)\r\n        // 遍历hashmap  如果hash的第i个元素的logo的小写等于键盘输入的\r\n        // 就打开hash的第i个元素的url \r\n    }\r\n})"]}